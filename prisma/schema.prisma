generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  cart          Cart?
  favorites     Favorite?
  orders        Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String         @id @default(cuid())
  name        String
  description String?
  price       Float
  images      ProductImage[]
  brandId     String
  brand       Brand          @relation(fields: [brandId], references: [id])
  categoryId  String
  category    Category       @relation(fields: [categoryId], references: [id])
  sizes       ProductSize[]
  createdAt   DateTime       @default(now())
}

model ProductSize {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id])
  sizeId    String
  size      Size    @relation(fields: [sizeId], references: [id])
  quantity  Int     @default(0)

  cartItems     CartItem[]
  favoriteItems FavoriteItem[]

  @@unique([productId, sizeId])
}

model Size {
  id       String        @id @default(cuid())
  name     String
  products ProductSize[]

  @@unique([name])
}

model Category {
  id       String    @id @default(cuid())
  name     String
  products Product[]
}

model Brand {
  id       String    @id @default(cuid())
  name     String
  products Product[]
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Cart {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  items CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id String @id @default(cuid())

  cart   Cart   @relation(fields: [cartId], references: [id])
  cartId String

  ProductSize   ProductSize @relation(fields: [ProductSizeId], references: [id])
  ProductSizeId String

  quantity Int @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorite {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  items FavoriteItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FavoriteItem {
  id String @id @default(cuid())

  favorite   Favorite @relation(fields: [favoriteId], references: [id])
  favoriteId String

  ProductSize   ProductSize @relation(fields: [ProductSizeId], references: [id])
  ProductSizeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([favoriteId, ProductSizeId])
}

model Order {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  token String

  totalAmount Int
  status      OrderStatus
  paymentId   String?

  items Json

  fullName String
  email    String
  phone    String
  address  String
  comment  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}